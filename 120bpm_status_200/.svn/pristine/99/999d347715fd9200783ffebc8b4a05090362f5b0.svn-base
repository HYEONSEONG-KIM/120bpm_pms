package kr.or.ddit.member.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import kr.or.ddit.db.ConnectionFactory;
import kr.or.ddit.vo.MemberVO;

public class MemberDAOImpl implements MemberDAO {
	private static MemberDAOImpl self;
	private MemberDAOImpl() {
		super();
	}
	
	public static MemberDAOImpl getInstance() {
		if(self == null)
			self = new MemberDAOImpl();
		return self;
	}


	@Override
	public MemberVO selectMemberById(String mem_id) {
		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT MEM_ID, MEM_NAME, MEM_PASS ");
		sql.append(" FROM MEMBER   ");
		sql.append(" WHERE MEM_ID = ?   ");
		try (Connection conn = ConnectionFactory.getConnection(); 
			PreparedStatement stmt = conn.prepareStatement(sql.toString())) {
//		 	5. 쿼리 실행
			stmt.setString(1, mem_id);
			ResultSet rs = stmt.executeQuery();
			MemberVO savedMember = null;
			if (rs.next()) {
				savedMember = new MemberVO();
				savedMember.setMem_id(rs.getString("MEM_ID"));
				savedMember.setMem_pass(rs.getString("MEM_PASS"));
				savedMember.setMem_name(rs.getString("MEM_NAME"));
			}
			rs.close();
			return savedMember;
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public int insertMember(MemberVO member) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public List<MemberVO> selectMemberList() {
		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT                                  ");
		sql.append("     MEM_ID,    MEM_NAME,    MEM_ADD1,   ");
		sql.append("     MEM_HP, MEM_MAIL,    MEM_MILEAGE,   ");
		sql.append("     MEM_DELETE                          ");
		sql.append(" FROM    MEMBER                          ");
		
		try (Connection conn = ConnectionFactory.getConnection(); 
			PreparedStatement stmt = conn.prepareStatement(sql.toString())) {
//		 	5. 쿼리 실행
			List<MemberVO> memberList = new ArrayList<>();
			ResultSet rs = stmt.executeQuery();
			while (rs.next()) {
				MemberVO member = MemberVO.builder()
						.mem_id(rs.getString("MEM_ID"))
						.mem_name(rs.getString("MEM_NAME"))
						.mem_add1(rs.getString("MEM_ADD1"))
						.mem_hp(rs.getString("MEM_HP"))
						.mem_mail(rs.getString("MEM_MAIL"))
						.mem_mileage(rs.getInt("MEM_MILEAGE"))
						.mem_delete(rs.getString("MEM_DELETE"))
						.build();
				memberList.add(member);
			}
			rs.close();
			return memberList;
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public MemberVO selectMemberDetail(String mem_id) {
		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT                                                         ");
		sql.append("     MEM_ID,    MEM_PASS,    MEM_NAME,                          ");
		sql.append("     MEM_REGNO1,    MEM_REGNO2,                                 ");
		sql.append("     TO_CHAR(MEM_BIR, 'YYYY-MM-DD') AS MEM_BIR,                 ");
		sql.append("     MEM_ZIP,    MEM_ADD1,    MEM_ADD2,                         ");
		sql.append("     MEM_HOMETEL,    MEM_COMTEL,    MEM_HP,                     ");
		sql.append("     MEM_MAIL,    MEM_JOB,    MEM_LIKE,                         ");
		sql.append("     MEM_MEMORIAL,                                              ");
		sql.append("     TO_CHAR(MEM_MEMORIALDAY, 'YYYY-MM-DD') AS MEM_MEMORIALDAY, ");   
		sql.append("     MEM_MILEAGE,                                               ");
		sql.append("     MEM_DELETE                                                 ");
		sql.append(" FROM    MEMBER                                                 ");
		sql.append(" WHERE MEM_ID = ?												");
		try (Connection conn = ConnectionFactory.getConnection(); 
			PreparedStatement stmt = conn.prepareStatement(sql.toString())) {
//		 	5. 쿼리 실행
			stmt.setString(1, mem_id);
			ResultSet rs = stmt.executeQuery();
			MemberVO savedMember = null;
			if (rs.next()) {
				savedMember = MemberVO.builder()
						.mem_id(rs.getString("MEM_ID"))
						.mem_pass(rs.getString("MEM_PASS"))
						.mem_name(rs.getString("MEM_NAME"))
						.mem_regno1(rs.getString("MEM_REGNO1"))
						.mem_regno2(rs.getString("MEM_REGNO2"))
						.mem_bir(rs.getString("MEM_BIR"))
						.mem_zip(rs.getString("MEM_ZIP"))
						.mem_add1(rs.getString("MEM_ADD1"))
						.mem_add2(rs.getString("MEM_ADD2"))
						.mem_hometel(rs.getString("MEM_HOMETEL"))
						.mem_comtel(rs.getString("MEM_COMTEL"))
						.mem_hp(rs.getString("MEM_HP"))
						.mem_mail(rs.getString("MEM_MAIL"))
						.mem_job(rs.getString("MEM_JOB"))
						.mem_like(rs.getString("MEM_LIKE"))
						.mem_memorial(rs.getString("MEM_MEMORIAL"))
						.mem_memorialday(rs.getString("MEM_MEMORIALDAY"))
						.mem_mileage(rs.getInt("MEM_MILEAGE"))
						.mem_delete(rs.getString("MEM_DELETE"))
						.build();
			}
			rs.close();
			return savedMember;
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public int updateMember(MemberVO member) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int deleteMember(String mem_id) {
		// TODO Auto-generated method stub
		return 0;
	}

}
