<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">

<!-- 	Authentication manager -->
	<beans:bean id = "passwordEncoder" class = "org.springframework.security.crypto.factory.PasswordEncoderFactories" 
		factory-method="createDelegatingPasswordEncoder"/>
	
	<beans:bean name = "loginSucessHandler" class = "kr.or.ddit.listener.LoginSucessHandler"
		c:defualURL="/main"
	/>

<!-- AuthenticationServiceImple 객체 setter 주입 -->
	<!-- passwordEncode 객체 setter 주입 -->
	<!--  authenticationProvider => AP => 입력한 정보와 DB에서 가져온 정보를 비교 -->
	<beans:bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider" 
		p:userDetailsService-ref="authService"
		p:passwordEncoder-ref="passwordEncoder"
		p:hideUserNotFoundExceptions="false"
	/>

	<!-- 인증이 완료된 계정 session에 담아줌 -->
	<authentication-manager id="authManager">
		<authentication-provider ref="authenticationProvider" />
	</authentication-manager>
	
	<!--  역할 기반 권한 부여와 함께 사용되는 기본 접두사 => Default : ROLE_ -->
	<beans:bean id="grantedAuthorityDefaults" class="org.springframework.security.config.core.GrantedAuthorityDefaults" 
		c:rolePrefix=""
	/>

	<!-- 인가에 대해 만장일치로 통과 하여야 인가 처리 완료인가에 대한 설정 -->
	<!-- <beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.ConsensusBased"
		p:allowIfEqualGrantedDeniedDecisions="false"
		p:messageSource-ref="messageSource"
	> -->
	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased"
		p:messageSource-ref="messageSource"
	>
	
	
		<!-- 
			AuthenticatedVoter:
			IS_AUTHENTICATED_FULLY(아이디와 패스워드를 입력받아 로그인한 경우)
			또는 IS_AUTHENTICATED_REMEMBERED(RemeberMe인경우 )
			또는 IS_AUTHENTICATED_ANONYMOUSLY(익명사용자)가 있는 경우 투표 
		-->
		
		<!-- 
			RoleHierarchyVoter : 현재 사용자에게 할당된 역할을 결정, RoleVoter 확장
			RoleVoter : 역할 접두사로 시작되는 구성 속성이 없으면 투표기권
			p:rolePrefix -> 위에 설정한 역할 기본 접두사
		-->
		
		<!-- 
			RoleHierarchyImpl : 다양한 접근 검사 구성 요소와 함께 사용할 역할 계층을 정의
			ROLE_A > ROLE_B
			ROLE_B > ROLE_AUTHENTICATED
			ROLE_A 가  B, AUTHENTICATED의 권한을 모두 가짐(>는 포함으로 해석)
			
		-->
		<beans:constructor-arg name="decisionVoters">
			<beans:list>
				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
<!-- 					권한 계층 구조 관련, RoleHierarchyImpl API 문서 참고. -->


				<beans:bean class="org.springframework.security.access.vote.RoleHierarchyVoter"
					p:rolePrefix="#{grantedAuthorityDefaults.rolePrefix}">
					
					<beans:constructor-arg name="roleHierarchy">
						<beans:bean class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
							<beans:property name="hierarchy">
								<beans:bean class="kr.or.ddit.security.RoleHierarchyStringFactoryBean" />
							</beans:property>
						</beans:bean>
					</beans:constructor-arg>
					
				</beans:bean>
				
				
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>
	
	
	
	<beans:bean id="requestMap" class="kr.or.ddit.security.RequestMapFactoryBean" />
	
	<beans:bean id="filterInvocationSecurityMetadataSource" class="kr.or.ddit.security.ReloadableFilterInvocationSecurityMetadataSource" 
		c:requestMap-ref="requestMap"
	/>
	
	<!-- 인가 필터(스프링 컨테이너 내의 필터 개념-Interceptor)
		authenticationManager : 인증에 대한 객체 -> Authentication
		accessDecisionManager : 권한 부여요청을 처리할 수 있는지 여부
		securityMetadataSource :  지정된 보안 개체 호출에 적용되는 configAttributes를 저장하고 식별할 수 있는 클래스에의해 구현
		 -->
	<beans:bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor" 
		p:authenticationManager-ref="authManager"
		p:accessDecisionManager-ref="accessDecisionManager"
		p:securityMetadataSource-ref="filterInvocationSecurityMetadataSource"
		p:messageSource-ref="messageSource"
	/>
	
	<!-- 
		사용자가 지정된 웹 URI에 대한 권한이 있는지 여부를 결정할 수 있음
	 	securityInterceptor : AbstractSecurityInterceptor의 상수 -> 보안 개체에 대한 보안 intecept 구현
	 -->
	<beans:bean id="webInvocationPrivilegeEvaluator" class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator" 
		c:securityInterceptor-ref="filterSecurityInterceptor"
	/>
	
	
	
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" 
		p:basenames="kr.or.ddit.msgs.errorMessage,kr.or.ddit.msgs.message,kr.or.ddit.security_message"
	/>
	
	<beans:bean id="messageSourceAccessor" class="org.springframework.context.support.MessageSourceAccessor" 
		c:messageSource-ref="messageSource"
	/>
	
	<beans:bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" 
		p:cookieName="languageCookie"
		p:cookieMaxAge="#{60*60*24*7}"
		p:cookiePath="/"
	/>
	
	<beans:bean id="i18nSupportFilter" class="kr.or.ddit.filter.I18nSupportFilter" />
	
<!-- 	Access Decision manager -->
	<!-- 이 태그 추가시 filter chain -->
	<!-- 사용자를 식별할 수있는 ID username -->
	<!-- login-processing-url : spring이 가로채야할 요청!!-> login.jsp의 action과 같은 주소 -->
	<http auto-config="true" authentication-manager-ref="authManager" use-expressions="true">
		<form-login 
			login-page="/login/loginForm.jsp"
			username-parameter="memId"
			password-parameter="memPass"
			login-processing-url="/login/loginCheck"
		
			authentication-success-handler-ref="loginSucessHandler"
			
			/>
		<logout
			logout-url="/logout"
			logout-success-url="/"
		
		/>
		
		<csrf disabled="true"/>
		
		<anonymous enabled="true" username="anonymous" granted-authority="IS_AUTHENTICATED_ANONYMOUSLY"/>
		
		<custom-filter ref="i18nSupportFilter" before="FIRST"/>
		<custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>
		
	</http>
	

	<!-- 어노테이션 사용하겠다는 설정 -->
	<global-method-security pre-post-annotations="enabled"/>
	
	
	
</beans:beans>










